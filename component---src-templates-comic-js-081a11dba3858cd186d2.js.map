{"version":3,"sources":["webpack:///./src/templates/comic.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["props","title","pageContext","className","id","rel","to","first","prev","next","fluid","map","node","childImageSharp","singlepanel","children","query","render","data","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"8FAAA,mGAQe,mBAACA,GACZ,OACQ,kBAAC,IAAD,KACR,kBAAC,IAAD,CAAKC,MAAOD,EAAME,YAAYD,MAAQ,gCAC9B,yBAAKE,UAAU,iBACX,4BAAKH,EAAME,YAAYD,OACnC,yBAAKE,UAAU,mBACb,kBAAC,OAAD,CAAMC,GAAG,QAAQD,UAAU,YAAYE,IAAI,QAAQC,GAAIN,EAAME,YAAYK,OAAzE,YACA,kBAAC,OAAD,CAAMH,GAAG,OAAOD,UAAU,YAAYE,IAAI,OAAOC,GAAIN,EAAME,YAAYM,MAAvE,UACA,kBAAC,OAAD,CAAMJ,GAAG,OAAOD,UAAU,YAAYE,IAAI,OAAOC,GAAG,kBAApD,UACA,kBAAC,OAAD,CAAMF,GAAG,OAAOD,UAAU,YAAYE,IAAI,OAAOC,GAAG,mBAApD,WACA,kBAAC,OAAD,CAAMF,GAAG,OAAOD,UAAU,YAAYE,IAAI,OAAOC,GAAIN,EAAME,YAAYO,MAAvE,UACA,kBAAC,OAAD,CAAML,GAAG,OAAOD,UAAU,YAAYE,IAAI,OAAOC,GAAG,YAApD,YAGUN,EAAME,YAAYQ,MAAMC,KAAI,gBAAEC,EAAF,EAAEA,KAAF,OACxB,kBAAC,IAAD,CACIF,MAAOE,EAAKC,gBAAgBH,MAC5BP,UAAWH,EAAME,YAAYY,YAAc,SAAW,Y,uGCZ/D,oBAAGC,EAAH,EAAGA,SAAH,OACC,kBAAC,cAAD,CACAC,MAAK,aAgBLC,OAAQ,SAAAC,GAEJ,OAEhB,oCACI,gCACI,kBAAC,OAAD,CAAMZ,GAAG,KAAT,kBAKJ,yBAAKH,UAAU,WACX,yBAAKA,UAAU,gBACX,kBAAC,OAAD,CAAMG,GAAG,iBACL,mDAEJ,kBAAC,OAAD,CAAMA,GAAG,WACL,wCAEJ,kBAAC,OAAD,CAAMA,GAAG,WACL,wCAEJ,kBAAC,OAAD,CAAMA,GAAG,aACL,mDAEJ,kBAAC,OAAD,CAAMA,GAAG,aACL,0CAEJ,kBAAC,OAAD,CAAMA,GAAG,UACL,wCAIPS,KAlDG,W,wZCHhB,SAASI,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMrB,EAAS,EAATA,MAC9BsB,EADuC,OACvCA,KAaFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFpB,MAAOA,EACP0B,cAAa,KACbL,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAAS5B,GAEX,CACE6B,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAAS5B,GAEX,CACE2B,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-templates-comic-js-081a11dba3858cd186d2.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./../components/layout\"\nimport SEO from \"./../components/seo\"\nimport Img from \"gatsby-image\"\n\nimport \"./../styles/comic.scss\"\n\nexport default (props) => {\n    return (\n            <Layout>\n    <SEO title={props.pageContext.title + \" | Comics | Chris D Clemens\"} />\n            <div className=\"comic-wrapper\">\n                <h2>{props.pageContext.title}</h2>\n    <div className=\"comic-nav-group\">\n      <Link id=\"first\" className=\"comic-nav\" rel=\"first\" to={props.pageContext.first}>|&lt; First</Link>\n      <Link id=\"prev\" className=\"comic-nav\" rel=\"prev\" to={props.pageContext.prev}>&lt; Prev</Link>\n      <Link id=\"rand\" className=\"comic-nav\" rel=\"rand\" to=\"/comics/random\">Random</Link>\n      <Link id=\"arch\" className=\"comic-nav\" rel=\"arch\" to=\"/comics/archive\">Archive</Link>\n      <Link id=\"next\" className=\"comic-nav\" rel=\"next\" to={props.pageContext.next}>Next &gt;</Link>\n      <Link id=\"last\" className=\"comic-nav\" rel=\"last\" to=\"/comics/\">Last &gt;|</Link>\n    </div>\n            {\n                props.pageContext.fluid.map(({node}) => \n                    <Img \n                        fluid={node.childImageSharp.fluid}\n                        className={props.pageContext.singlepanel ? 'single' : ''}\n                    />\n                )\n            }\n            </div>\n            </Layout>\n           )\n}\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport FrontLink from \"./../components/front-link\"\n\nimport \"./../styles/layout.scss\"\n\nexport default ({ children }) => (\n                <StaticQuery\n                query={graphql`\n                    query {\n                        allFile(filter: {relativeDirectory: {eq: \"front\"}}) {\n                            edges {\n                                node {\n                                    relativePath\n                                    childImageSharp {\n                                        fluid(maxHeight: 300, maxWidth: 300) {\n                                            ...GatsbyImageSharpFluid\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `}\n                render={data => {\n\n                    return (\n\n    <>\n        <header>\n            <Link to=\"/\">\n                Chris Clemens\n            </Link>\n        </header>\n\n        <div className=\"content\">\n            <div className=\"layout-links\">\n                <Link to=\"/commissioned\">\n                    <div>Commissioned Work</div>\n                </Link>\n                <Link to=\"/comics\">\n                    <div>Comics</div>\n                </Link>\n                <Link to=\"/videos\">\n                    <div>Videos</div>\n                </Link>\n                <Link to=\"/original\">\n                    <div>Original Articles</div>\n                </Link>\n                <Link to=\"/drawings\">\n                    <div>Drawings</div>\n                </Link>\n                <Link to=\"/about\">\n                    <div>About</div>\n                </Link>\n            </div>\n\n            {children}\n        </div>\n    </>\n\n                           )\n                }}\n                />\n               )\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}