{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/original.js","webpack:///./src/components/seo.js"],"names":["children","query","render","data","to","className","OriginalPage","title","allGoogleSheetOriginalRow","nodes","map","node","href","link","target","fluid","allFile","edges","find","fileNode","relativePath","image","childImageSharp","React","Component","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"yLAce,oBAAGA,EAAH,EAAGA,SAAH,OACC,kBAAC,cAAD,CACAC,MAAK,aAgBLC,OAAQ,SAAAC,GAEJ,OAEhB,oCACI,gCACI,kBAAC,OAAD,CAAMC,GAAG,KAAT,kBAKJ,yBAAKC,UAAU,WACX,yBAAKA,UAAU,gBACX,kBAAC,OAAD,CAAMD,GAAG,iBACL,mDAEJ,kBAAC,OAAD,CAAMA,GAAG,WACL,wCAEJ,kBAAC,OAAD,CAAMA,GAAG,WACL,wCAEJ,kBAAC,OAAD,CAAMA,GAAG,aACL,mDAEJ,kBAAC,OAAD,CAAMA,GAAG,aACL,0CAEJ,kBAAC,OAAD,CAAMA,GAAG,UACL,wCAIPJ,KAlDG,W,0sLCNKM,E,gLACjBJ,OAAA,WACI,OACI,kBAAC,cAAD,CACID,MAAK,YAuBLC,OAAQ,SAAAC,GACJ,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKI,MAAM,wCAEnC,yBAAKF,UAAU,iBAEXF,EAAKK,0BAA0BC,MAAMC,KAAI,SAACC,GAAD,OACrC,uBAAGC,KAAMD,EAAKE,KAAMC,OAAO,UACvB,kBAAC,IAAD,CACIC,MAAOZ,EAAKa,QAAQC,MAAMC,MAAK,SAACC,GAAD,OAC3BA,EAASR,KAAKS,eAAiB,YAAcT,EAAKU,SAChDV,KAAKW,gBAAgBP,QAG/B,8BACKJ,EAAKJ,cAxCd,U,GAH8BgB,IAAMC,Y,0WCGhD,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMrB,EAAS,EAATA,MAC9BsB,EADuC,OACvCA,KAaFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFpB,MAAOA,EACP0B,cAAa,KACbL,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAAS5B,GAEX,CACE6B,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAAS5B,GAEX,CACE2B,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-original-js-8aaedc97befd2af88e04.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport FrontLink from \"./../components/front-link\"\n\nimport \"./../styles/layout.scss\"\n\nexport default ({ children }) => (\n                <StaticQuery\n                query={graphql`\n                    query {\n                        allFile(filter: {relativeDirectory: {eq: \"front\"}}) {\n                            edges {\n                                node {\n                                    relativePath\n                                    childImageSharp {\n                                        fluid(maxHeight: 300, maxWidth: 300) {\n                                            ...GatsbyImageSharpFluid\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `}\n                render={data => {\n\n                    return (\n\n    <>\n        <header>\n            <Link to=\"/\">\n                Chris Clemens\n            </Link>\n        </header>\n\n        <div className=\"content\">\n            <div className=\"layout-links\">\n                <Link to=\"/commissioned\">\n                    <div>Commissioned Work</div>\n                </Link>\n                <Link to=\"/comics\">\n                    <div>Comics</div>\n                </Link>\n                <Link to=\"/videos\">\n                    <div>Videos</div>\n                </Link>\n                <Link to=\"/original\">\n                    <div>Original Articles</div>\n                </Link>\n                <Link to=\"/drawings\">\n                    <div>Drawings</div>\n                </Link>\n                <Link to=\"/about\">\n                    <div>About</div>\n                </Link>\n            </div>\n\n            {children}\n        </div>\n    </>\n\n                           )\n                }}\n                />\n               )\n","import React from \"react\"\nimport { Link, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Img from \"gatsby-image\"\n\nimport \"./../styles/original.scss\"\n\nexport default class OriginalPage extends React.Component {\n    render() {\n        return (\n            <StaticQuery\n                query={graphql`\n                query {\n                    allGoogleSheetOriginalRow {\n                        nodes {\n\t\t\t\ttitle\n\t\t\t\tlink\n\t\t\t\timage\n                        }\n                    }\n                    allFile(filter: {relativeDirectory: {eq: \"original\"}}) {\n                        edges {\n                            node {\n\t\t\t\trelativePath\n                                childImageSharp {\n                                    fluid(maxWidth: 800) {\n                                        ...GatsbyImageSharpFluid\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                `}\n                render={data=>{\n                    return (\n                        <Layout>\n                            <SEO title=\"Original Articles | Chris D Clemens\" />\n\n    <div className=\"original-list\">\n    {\n        data.allGoogleSheetOriginalRow.nodes.map((node) => \n            <a href={node.link} target=\"_blank\">\n                <Img\n                    fluid={data.allFile.edges.find((fileNode) =>\n                        fileNode.node.relativePath === \"original/\" + node.image\n                        ).node.childImageSharp.fluid\n                    }\n                />\n                <span>\n                    {node.title}\n                </span>\n            </a>\n        )\n    }\n    </div>\n                        </Layout>\n                    )\n                }}\n            />\n        )\n    }\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}